//This is simple traversal using recursion T.C = O(N) S.C = O(N)
class BinaryTree
{
     static void solve(Node root, ArrayList<Integer> list){
        if(root == null){
            return;
        }
        
        list.add(root.data);
        solve(root.left,list);
        solve(root.right,list);
        
    }
    //Function to return a list containing the preorder traversal of the tree.
    static ArrayList<Integer> preorder(Node root)
    {
       ArrayList<Integer> list = new ArrayList<>();
       solve(root,list);
       return list;
    }

}
..........................Now this is Morris traversal T.C = O(N) S.C = O(1)  it not using any recursion or stack..................................................

class BinaryTree
{
  
    static ArrayList<Integer> preorder(Node root)
    {
       ArrayList<Integer> list = new ArrayList<>();
       Node curr = root;
       while(curr != null){
           if(curr.left == null){
               list.add(curr.data);
               curr = curr.right;
           }else{
               Node prev = curr.left;
               while(prev.right != null && prev.right != curr){
                   prev = prev.right;
               }
               if(prev.right == null){
                   prev.right = curr;
                   list.add(curr.data);
                   curr = curr.left;
               }else{
                   prev.right = null;
                   curr = curr.right;
               }
           }
       }
       return list;
    }

}
