class Solution
{
    private static Node solve(Node root, int[] k, int node) {
        // Base case
        if (root == null)
            return null;

        if (root.data == node) {
            return root;
        }

        Node leftAns = solve(root.left, k, node);
        Node rightAns = solve(root.right, k, node);

        // Wapas
        if (leftAns != null && rightAns == null) {
            k[0]--;
            if (k[0] <= 0) {
                // Answer lock
                k[0] = Integer.MAX_VALUE;
                return root;
            }
            return leftAns;
        }

        if (leftAns == null && rightAns != null) {
            k[0]--;
            if (k[0] <= 0) {
                // Answer lock
                k[0] = Integer.MAX_VALUE;
                return root;
            }
            return rightAns;
        }
        return null;
    }

    // Function to find the kth ancestor of a node in a binary tree
    public static int kthAncestor(Node root, int k, int node) {
        int[] kValue = {k};
        Node ans = solve(root, kValue, node);
        if (ans == null || ans.data == node)
            return -1;
        else
            return ans.data;
    }
}

