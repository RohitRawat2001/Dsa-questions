
class Solution
{    private static int findPosition(int[] in, int inorderStart, int inorderEnd, int element) {
        for (int i = inorderStart; i <= inorderEnd; i++) {
            if (in[i] == element) {
                return i;
            }
        }
        return -1;
    }

    private static Node solve(int[] in, int[] pre, int[] preorderIndex, int inorderStart, int inorderEnd) {
        if (preorderIndex[0] >= pre.length || inorderStart > inorderEnd) {
            return null;
        }

        int element = pre[preorderIndex[0]++];
        Node root = new Node(element);
        int position = findPosition(in, inorderStart, inorderEnd, element);

        root.left = solve(in, pre, preorderIndex, inorderStart, position - 1);
        root.right = solve(in, pre, preorderIndex, position + 1, inorderEnd);

        return root;
    }

    public static Node buildTree(int[] in, int[] pre, int n) {
        int[] preorderIndex = new int[]{0};                  // in c++ it uses as int preorderIndex = 0;  by reference
        return solve(in, pre, preorderIndex, 0, n - 1);
    }
}

//////////////////////////////////another version of same code .........................................................coding ninja


public class Solution {
	 private static int findPosition(int[] inOrder, int inorderStart, int inorderEnd, int element) {
        for (int i = inorderStart; i <= inorderEnd; i++) {
            if (inOrder[i] == element) {
                return i;
            }
        }
        return -1;
    }

    public static BinaryTreeNode<Integer> solve(int[] preOrder, int[] inOrder, int[] preorderIndex, int inorderStart, int inorderEnd){
	  if (preorderIndex[0] >= preOrder.length || inorderStart > inorderEnd) {
            return null;
        }

        int element = preOrder[preorderIndex[0]++];
        BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(element);
        int position = findPosition(inOrder, inorderStart, inorderEnd, element);

        root.left = solve(preOrder, inOrder, preorderIndex, inorderStart, position - 1);
        root.right = solve(preOrder, inOrder, preorderIndex, position + 1, inorderEnd);

        return root;
    }

	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		int[] preorderIndex = new int[]{0};
		int n = inOrder.length;
		return solve(preOrder,inOrder,preorderIndex,0,n-1);
	}

}
