import java.util.*;
import java.io.*;


public class Solution {
    // Recursion
    public static int solveRec(ArrayList<Integer> nums,int n){

        if(n < 0){
            return 0;
        }
        if(n == 0){
            return nums.get(0);
        }

        int include = solveRec(nums, n-2) + nums.get(n);
        int exclude = solveRec(nums, n-1) + 0;

        return Math.max(include,exclude);

    }

    // Top-down
     public static int solveMem(ArrayList<Integer> nums,int n,int[] dp){

        if(n < 0){
            return 0;
        }
        if(n == 0){
            return nums.get(0);
        }

        if(dp[n] != -1){
            return dp[n];
        }

        int include = solveMem(nums, n-2,dp) + nums.get(n);
        int exclude = solveMem(nums, n-1,dp) + 0;

        return dp[n] = Math.max(include,exclude);

    }

    // Bottom-Up

    public static int solveTab(ArrayList<Integer> nums){
        int n = nums.size();

        
        if (n ==0) {
            return 0;
        } else if (n ==1) {
            return nums.get(0);
        }

         int[] dp = new int[n];
        dp[0] = nums.get(0);
        dp[1] = Math.max(nums.get(0), nums.get(1));

        for (int i = 2; i < n; i++) {
            int include = dp[i - 2] + nums.get(i);
            int exclude = dp[i - 1];
            dp[i] = Math.max(include, exclude);
        }

        return dp[n - 1];
    }
       //Space optimize
       public static int  SpaceOpt(ArrayList<Integer> nums){
            int n = nums.size();

        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return nums.get(0);
        }

        int prev1 = nums.get(0);
        int prev2 = Math.max(nums.get(0), nums.get(1));

        for (int i = 2; i < n; i++) {
            int include = prev1 + nums.get(i);
            int exclude = prev2;

            int ans = Math.max(include, exclude);
            prev1 = prev2;
            prev2 = ans;
        }

        return prev2;

       }
// Space to memoization
 public static int  SpaceOptToMemoization(ArrayList<Integer> nums){
           int n = nums.size();

        int prev2 = 0;
        int prev1 = nums.get(0);

        for (int i = 1; i < n; i++) {
            int include = prev2 + nums.get(i);
            int exclude = prev1;

            int ans = Math.max(include, exclude);
            prev2 = prev1;
            prev1 = ans;
        }

        return prev1;


       }


    public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
    //    int n = nums.size();

    //    int[] dp = new int[n+1];
    //    Arrays.fill(dp,-1);

       //return solveMem(nums, n-1,dp);
       //return solveTab(nums);

       return SpaceOpt(nums);
    }
} 
