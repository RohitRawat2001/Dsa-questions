class Solution {
    //recursion
    public int solveREc(int n){
        if(n==0 || n==1){
            return 1;
        }
        return solve(n-1)+solve(n-2);
    }
    
     //top-down
    public int solve(int n,int[] dp){
         if (n == 0 || n == 1) {
            return 1;
        }
        
        if(dp[n] != -1){
            return dp[n];
        }
        
        dp[n] = solve(n-1,dp)+solve(n-2,dp);
        return dp[n];
    }
    
   //bottom up
    
    public int solve2(int n){
        
        int[] dp = new int[n+1];
        
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1]+dp[i-2];
            
        }
        return dp[n];
    }
    // space optimization
    public int solve3(int n){
        
        int prev1=1;
        int prev2 =1;
        
        for(int i=2;i<=n;i++){
            int curr = prev1+prev2;
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
    public int climbStairs(int n) {
        
//         int ans = solve(n-1)+solve(n-2);
        
//         return ans;
        
//         int[] dp = new int[n+1];
//         Arrays.fill(dp,-1);
        
        int ans = solve3(n);
        
        return ans;
        
        
        
        
    }
}
