class Solution {
    
    //Recursion = [TLE]
    public int solve(int index,int buy,int[] prices,int limit){
        if(index == prices.length){
            return 0;
        }
        if(limit == 0){
            return 0;
        }
        
        int profit = 0;
        if(buy == 1){
            int buykaro = -prices[index] + solve(index+1,0,prices,limit);
            int skipkaro = 0 + solve(index+1,1,prices,limit);
            profit = Math.max(buykaro,skipkaro);
        }else{
          int Sellkaro = +prices[index] + solve(index+1,1,prices,limit-1);
          int skipkaro = 0 + solve(index+1,0,prices,limit);
          profit = Math.max(Sellkaro,skipkaro);
        }
        return profit;        
    }
    
    // Top-down = Recursion + Memoization
   public int solve(int index, int buy, int[] prices, int limit, int[][][] dp) {
        if (index == prices.length || limit == 0) {
            return 0;
        }

        if (dp[index][buy][limit] != -1) {
            return dp[index][buy][limit];
        }

        int profit = 0;
        if (buy == 1) {
            int buykaro = -prices[index] + solve(index + 1, 0, prices, limit, dp);
            int skipkaro = 0 + solve(index + 1, 1, prices, limit, dp);
            profit = Math.max(buykaro, skipkaro);
        } else {
            int sellkaro = prices[index] + solve(index + 1, 1, prices, limit - 1, dp);
            int skipkaro = 0 + solve(index + 1, 0, prices, limit, dp);
            profit = Math.max(sellkaro, skipkaro);
        }

        dp[index][buy][limit] = profit;
        return profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][3]; // [index][buy/sell][transactions_left]
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], -1); // Initialize memoization array with -1
            }
        }
        return solve(0, 1, prices, 2, dp);
    }
}
