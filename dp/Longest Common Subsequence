class Solution {
    
    //Recursion
    public int solveRec(String a, String b,int i,int j){
        if(i == a.length()){
            return 0;
        }
        if(j == b.length()){
            return 0;
        }
        
        int take = 0;
       if (a.charAt(i) == b.charAt(j)) {
            take = 1 + solveRec(a,b,i+1,j+1);   
        }else{
            take = Math.max(solveRec(a,b,i+1,j),solveRec(a,b,i,j+1));
        }
        return take;
    }
    
    //Top down
    
    public int solveMem(String a, String b,int i,int j,int[][] dp){
     if(i == a.length()){
            return 0;
        }
        if(j == b.length()){
            return 0;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
           int take = 0;
       if (a.charAt(i) == b.charAt(j)) {
            take = 1 + solveMem(a,b,i+1,j+1,dp);   
        }else{
            take = Math.max(solveMem(a,b,i+1,j,dp),solveMem(a,b,i,j+1,dp));
        }
        return dp[i][j] = take;
    }
    
    // bottom Up
    public int solveTab(String a, String b){
              int m = a.length();
              int n = b.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int ans;
                if (a.charAt(i) == b.charAt(j)) {
                    ans = 1 + dp[i + 1][j + 1];
                } else {
                    ans = Math.max(dp[i][j + 1], dp[i + 1][j]);
                }
                dp[i][j] = ans;
            }
        }
        
        return dp[0][0];
    }
    
    public int longestCommonSubsequence(String text1, String text2) {
        
//           int n = text1.length();
//           int m = text2.length();
        
//         int[][] dp = new int[n+1][m+1];
//         for(int i=0;i<=n;i++){
//             Arrays.fill(dp[i],-1);
//         }
        
       // return solveRec(text1,text2,0,0);
        
       // return solveMem(text1,text2,0,0,dp);
        
        return solveTab(text1,text2);
        
        
    }
}
