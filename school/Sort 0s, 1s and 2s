Sort 0s, 1s and 2s
Given an array arr containing only 0s, 1s, and 2s. Sort the array in ascending order.
Examples:

Input: arr[]= [0, 2, 1, 2, 0]
Output: 0 0 1 2 2
Explanation: 0s 1s and 2s are segregated into ascending order.
Input: arr[] = [0, 1, 0]
Output: 0 0 1
Explanation: 0s 1s and 2s are segregated into ascending order.

................................................................................


class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(ArrayList<Integer> arr) {
        int n = arr.size();
        int low = 0;
        int mid = 0;
        int high = n - 1;
        
        while (mid <= high) {
            if (arr.get(mid) == 0) {
                // Swap arr[low] and arr[mid]
                int temp = arr.get(mid);
                arr.set(mid, arr.get(low));
                arr.set(low, temp);
                mid++;
                low++;
            } else if (arr.get(mid) == 1) {
                mid++;
            } else {
                // Swap arr[mid] and arr[high]
                int temp = arr.get(mid);
                arr.set(mid, arr.get(high));
                arr.set(high, temp);
                high--;
            }
        }
    }
}
