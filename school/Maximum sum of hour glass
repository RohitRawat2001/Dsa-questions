class Solution {
    int findMaxSum(int n, int m, int mat[][]) {
        // Initialize the maximum sum with the smallest possible value
        int maxSum = -1;

        // Traverse the matrix to find all possible hourglasses
        for (int i = 0; i <= n - 3; i++) { // Row boundary for hourglass
            for (int j = 0; j <= m - 3; j++) { // Column boundary for hourglass
                // Calculate the sum of the current hourglass
                int currentSum = mat[i][j] + mat[i][j + 1] + mat[i][j + 2] // Top row
                               + mat[i + 1][j + 1]                        // Middle element
                               + mat[i + 2][j] + mat[i + 2][j + 1] + mat[i + 2][j + 2]; // Bottom row
                
                // Update maxSum if the current sum is greater
                maxSum = Math.max(maxSum, currentSum);
            }
        }

        return maxSum; // Return the maximum hourglass sum
    }
};
