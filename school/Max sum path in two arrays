Max sum path in two arrays
Difficulty: MediumAccuracy: 30.9%Submissions: 74K+Points: 4
Given two sorted arrays of distinct integers arr1 and arr2. Each array may have some elements in common with the other array. Find the maximum sum of a path from the beginning of any array to the end of any array. You can switch from one array to another array only at the common elements.

Note:  When we switch from one array to other,  we need to consider the common element only once in the result.

Examples : 

Input: arr1 = [2, 3, 7, 10, 12] , arr2 = [1, 5, 7, 8]
Output: 35
Explanation: The path will be 1+5+7+10+12 = 35, where 1 and 5 come from arr2 and then 7 is common so we switch to arr1 and add 10 and 12.
..................................................................................


class Solution {
    public int maxPathSum(List<Integer> arr1, List<Integer> arr2) {
        
        int ptr1 = 0; // Pointer for arr1
        int ptr2 = 0; // Pointer for arr2
        int sum1 = 0; // Sum of elements in arr1
        int sum2 = 0; // Sum of elements in arr2
        int result = 0; // Resultant maximum path sum
        int n = arr1.size(); // Size of arr1
        int m = arr2.size(); // Size of arr2

        // Traverse both lists until one of them is exhausted
        while (ptr1 < n && ptr2 < m) {
            if (arr1.get(ptr1) < arr2.get(ptr2)) {
                
                sum1 += arr1.get(ptr1); // Add element to sum1 if arr1 element is smaller
                ptr1++;
                
            } else if (arr1.get(ptr1) > arr2.get(ptr2)) {
                
                sum2 += arr2.get(ptr2); // Add element to sum2 if arr2 element is smaller
                ptr2++;
                
            } else {
                
                // If elements are equal, add the maximum of sum1 and sum2 to result
                result += Math.max(sum1, sum2) + arr1.get(ptr1);
                ptr1++;
                ptr2++;
                sum1 = 0; // Reset sum1
                sum2 = 0; // Reset sum2
                
            }
        }

        // Add remaining elements of arr1 to sum1
        while (ptr1 < n) {
            
            sum1 += arr1.get(ptr1);
            ptr1++;
            
        }

        // Add remaining elements of arr2 to sum2
        while (ptr2 < m) {
            
            sum2 += arr2.get(ptr2);
            ptr2++;
            
        }

        // Add the maximum of the remaining sums to the result
        return result + Math.max(sum1, sum2);
   }
}
