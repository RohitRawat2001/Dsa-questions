smaller code at footer

public class Solution {
    public static Node deleteTail(Node head) {
        if (head == null || head.next == null) {
            return null; // Return null if the list is empty or contains only one element
        }

        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;
        }

        Node newTail = tail.prev; // Fixing variable name to 'newTail' and accessing 'prev' instead of 'back'

        newTail.next = null;
        tail.prev = null;

        return head;
    }

    public static Node deleteHead(Node head) {
        if (head == null || head.next == null) {
            return null; // Return null if the list is empty or contains only one element
        }

        Node newHead = head.next; // Fixing variable name to 'newHead'
        newHead.prev = null; // Set 'prev' pointer of the new head to null
        head.next = null; // Set 'next' pointer of 'head' to null

        return newHead; // Returning the new head
    }

    public static Node deleteNode(Node head, int k) {
        if (head == null) {
            return null;
        }
        int count = 1; // Start count from 1
        Node kNode = head;
        while (kNode != null) {
            if (count == k) {
                break;
            }
            kNode = kNode.next;
            count++; // Increment count within the loop
        }
        if (kNode == null) {
            return head; // If k exceeds the size of the list, return head as it is
        }

        Node prev = kNode.prev; // Accessing 'prev' instead of 'back'
        Node next = kNode.next;

        if (prev == null && next == null) {
            return null; // If kNode is the only node in the list
        } else if (prev == null) {
            return deleteHead(head); // If kNode is the head
        } else if (next == null) {
            return deleteTail(head); // If kNode is the tail
        }

        prev.next = next;
        next.prev = prev;

        kNode.next = null;
        kNode.prev = null;

        return head;
    }
}
.................................................................................................................................

 public static Node deleteNode(Node head, int k) {
         int cnt = 1;

        Node temp = head;

        if(head == null || head.next == null){
            return null;
        }

        else if(k == 1){
            head = head.next;
            return head;
        }

        while(temp.next != null){
            if(cnt == k){
                break;
            }
             cnt++;
            temp = temp.next;
        }
        temp.prev.next = temp.next;

        if(temp.next != null){
            temp.next.prev = temp.prev;
        }
        return head;
    }
}
