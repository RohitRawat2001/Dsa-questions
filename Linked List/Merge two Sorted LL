Approach 1 :  Both T.C = O(n)  S.C = O(1)

class Solution {

ListNode solve(ListNode list1, ListNode list2){
      if(list1.next == null){
          list1.next = list2;
          return list1;
      }
    
     ListNode curr1=list1;
     ListNode curr2=list2;
     ListNode next1=curr1.next;
     ListNode next2=curr2.next;

     while(next1 != null && curr2 != null){
         if(curr1.val <= curr2.val && curr2.val <=next1.val){
             curr1.next=curr2;
             next2=curr2.next;
             curr2.next=next1;

             curr1=curr2;
             curr2=next2;

         }else{
             curr1=next1;
             next1=next1.next;

             if(next1==null){
                 curr1.next=curr2;
                 return list1;
             }
         }
     }
     return list1;
}

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1;            
        }

        if(list1.val <= list2.val){
            return solve(list1,list2);
        }else{
            return solve(list2,list1);
        }
        
    }
}



More optimize 

class LinkedList
{
    
      Node sortedMerge(Node head1, Node head2) {
        if (head1 == null) {
            return head2;
        }
        if (head2 == null) {
            return head1;
        }

        // Initialize a dummy node as the merged list's head.
        Node dummy = new Node(-1);
        Node tail = dummy;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }

        // Attach any remaining nodes from both lists (if any).
        if (head1 != null) {
            tail.next = head1;
        } else {
            tail.next = head2;
        }

        return dummy.next; // Return the merged list (skip the dummy node).
    }
}
