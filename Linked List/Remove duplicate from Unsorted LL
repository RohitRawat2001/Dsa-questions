// This is optimal code for both sorted or unsorted LL

The time complexity of the provided code for removing duplicates from an unsorted linked list using a HashMap (or Hashtable) is O(n),(where n is the number of nodes in the linked list.)
The space complexity is also O(n), (where n is the number of unique values in the linked list.)

class Solution
{
    //Function to remove duplicates from unsorted linked list.
    public Node removeDuplicates(Node head) 
    {
         // Your code here
          if (head == null || head.next == null) {
            return head;
        }

        HashMap<Integer, Boolean> seenMap = new HashMap<>();
        Node current = head;
        Node previous = null;

        while (current != null) {
            if (seenMap.containsKey(current.data)) {
                // Duplicate found, remove current node
                previous.next = current.next;
            } else {
                seenMap.put(current.data, true);
                previous = current;
            }
            current = current.next;
        }

        return head;
       
    }
}
