approach 1 :  time =  nlogn

class Solution {
    public int findKthLargest(int[] nums, int k) {
         // Sort the array in descending order
        Arrays.sort(nums);
        
        // Return the kth largest element
        return nums[nums.length - k];
    }
}                                    

approach 2 : using min heap  (NOte that using max heap you find kth smallest element and using min heap you find kth largest element
Time Complexity = O(nlogK) S.C = O(K)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for(int i = 0 ; i < k ; i++){
            pq.add(nums[i]);
        }
        for(int i = k ; i < n ; i++){
            if(nums[i] > pq.peek()){
                pq.poll();
                pq.add(nums[i]);
            }
        }
        return pq.peek();
    }
}
