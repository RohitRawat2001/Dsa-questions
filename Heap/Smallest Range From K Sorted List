import java.util.*;

class Node {
    int data;
    int i;    // row
    int j;    // col

    public Node(int data, int i, int j) {
        this.data = data;
        this.i = i;
        this.j = j;
    }
}

public class Solution {
    public static int kSorted(int[][] arr, int k, int n) {
        int mini = Integer.MAX_VALUE;
        int maxi = Integer.MIN_VALUE;

        PriorityQueue<Node> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a.data, b.data));

        for (int i = 0; i < k; i++) {
            Node temp = new Node(arr[i][0], i, 0);
            minHeap.add(temp);

            maxi = Math.max(maxi, arr[i][0]);
            mini = Math.min(mini, arr[i][0]);
        }

        int start = mini;
        int end = maxi;

        while (!minHeap.isEmpty()) {
            Node temp = minHeap.poll();

            mini = temp.data;

            if ((maxi - mini) < (end - start)) {
                start = mini;
                end = maxi;
            }

            if (temp.j + 1 < n) {
                Node temp1 = new Node(arr[temp.i][temp.j + 1], temp.i, temp.j + 1);
                minHeap.add(temp1);

                maxi = Math.max(maxi, arr[temp.i][temp.j + 1]);
            } else {
                break;
            }
        }

        return (end - start) + 1;
    }
}
