
class Solution {

    // Function to build a Heap from array.
    void buildHeap(int arr[], int n) {
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
    }

    // Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest]) {
            largest = left;
        }

        if (right < n && arr[right] > arr[largest]) {
            largest = right;
        }

        if (largest != i) {
            swap(arr, largest, i);
            heapify(arr, n, largest);
        }
    }

    // Function to swap two elements in the array.
    void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Function to sort an array using Heap Sort.
    public void heapSort(int arr[], int n) {
        // Build a max heap from the array.
        buildHeap(arr, n);

        // One by one extract elements from the heap
        // and place them at the end of the array.
        for (int i = n - 1; i > 0; i--) {
            // Move the current root (maximum element) to the end of the array.
            swap(arr, 0, i);

            // Call heapify on the reduced heap.
            heapify(arr, i, 0);
        }
    }
}
