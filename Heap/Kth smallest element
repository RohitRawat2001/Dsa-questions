approach 1 :  Arrays.sort(arr);
              return arr[k-1];

approach 2 : 
Time Complexity = O(nlogK) S.C = O(K)

class Solution{
    public static int kthSmallest(int[] arr, int k) 
    { 
        int n = arr.length;
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

        for(int i = 0 ; i < k ; i++){
            pq.add(arr[i]);
        }
        for(int i = k ; i < n ; i++){
            if(arr[i] < pq.peek()){
                pq.poll();
                pq.add(arr[i]);
            }
        }
        return pq.peek();
    } 
}
