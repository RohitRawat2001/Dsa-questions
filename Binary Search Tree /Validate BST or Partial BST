public class Solution {
     public static boolean isBST(BinaryTreeNode<Integer> root, int min, int max) {
        if (root == null) {
            return true;
        }

        if (root.data >= min && root.data <= max) {
            boolean left = isBST(root.left, min, root.data);
            boolean right = isBST(root.right, root.data, max);
            return left && right;
        } else {
            return false;
        }
    }

    public static boolean validateBST(BinaryTreeNode<Integer> root) {
        // Write your code here
        return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
}


approach 2 :  do in this first you find inorder traversal and then it is sorted so it is true or false

public class Solution {
    // Helper function for inorder traversal
    private static void inorderTraversal(BinaryTreeNode<Integer> root, List<Integer> list) {
        if (root == null) return;
        
        inorderTraversal(root.left, list);
        list.add(root.data);
        inorderTraversal(root.right, list);
    }
    
    public static boolean validateBST(BinaryTreeNode<Integer> root) {
        List<Integer> list = new ArrayList<>();
        inorderTraversal(root, list);
        
        // Check if the inorder list is sorted
        for (int i = 1; i < list.size(); i++) {
            if (list.get(i) <= list.get(i - 1))
                return false;
        }
        
        return true;
    }
}
