public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        // Write your code here
        int n=a.length;

        int maxlen=0;
        
        for(int i=0;i<n;i++){
            long sum=0;
            for(int j=i;j<n;j++){
                sum += a[j];

          if(sum == k)
                maxlen=Math.max(maxlen,j-i+1);
          
            }
        }
        return maxlen;
    }
}

// hashMap optimal solution.......................................................................................................................................

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
	HashMap<Integer, Integer> preSumMap = new HashMap<>();

 

        //initialize variables to store current sum and max length of subarray

        int sum = 0;

        int maxLen = 0;

 

        for (int i = 0; i < nums.length; i++) {

            sum += nums[i];

 

            //check if the current sum equals sum k

            if (sum == k) {

                //update maximum length with the current index + 1

                maxLen = Math.max(maxLen, i + 1);

            }

 

            //calculate the remainder needed to reach the target sum k

            int rem = sum - k;

 

            //if the remainder exists in the prefix sum map

            if (preSumMap.containsKey(rem)) {

                //calculate the length of the subarray that equals k

                int len = i - preSumMap.get(rem);

                maxLen = Math.max(maxLen, len);

            }

 

            //if the current sum does not exist in the prefix sum map

            if (!preSumMap.containsKey(sum)) {

                //store the current sum and its index in the map

                preSumMap.put(sum, i);

            }

        }

        return maxLen;

    }
	
}

// optimal solution for positive elements ........................................................................................................

public class Main {
    public static int getLongestSubarray(int []a, long k) {
        int n = a.length; // size of the array.

        int left = 0, right = 0; // 2 pointers
        long sum = a[0];
        int maxLen = 0;
        while (right < n) {
            // if sum > k, reduce the subarray from left
            // until sum becomes less or equal to k:
            while (left <= right && sum > k) {
                sum -= a[left];
                left++;
            }

            // if sum = k, update the maxLen i.e. answer:
            if (sum == k) {
                maxLen = Math.max(maxLen, right - left + 1);
            }

            // Move forward thw right pointer:
            right++;
            if (right < n) sum += a[right];
        }

        return maxLen;
    }
