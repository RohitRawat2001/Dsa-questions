import java.util.*;
public class Solution {   
    
     public static int[] spiralMatrix(int[][] mat) {

         
        if (mat == null || mat.length == 0 || mat[0].length == 0) {
            return new int[0];
        }

        int n = mat.length; // no. of rows
        int m = mat[0].length; // no. of columns

        int[] ans = new int[n * m];
        int index = 0;

        // Initialize the pointers required for traversal.
        int top = 0, left = 0, bottom = n - 1, right = m - 1;

        // Loop until all elements are not traversed.
        while (top <= bottom && left <= right) {

            // For moving left to right
            for (int i = left; i <= right; i++)
                ans[index++] = mat[top][i];

            top++;

            // For moving top to bottom.
            for (int i = top; i <= bottom; i++)
                ans[index++] = mat[i][right];

            right--;

            // For moving right to left.
            if (top <= bottom) {
                for (int i = right; i >= left; i--)
                    ans[index++] = mat[bottom][i];

                bottom--;
            }

            // For moving bottom to top.
            if (left <= right) {
                for (int i = bottom; i >= top; i--)
                    ans[index++] = mat[i][left];

                left++;
            }
        }
        return ans;
    }

}


// using List ..................................................................................................................................................................

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
         List<Integer> result = new ArrayList<>();
        if (matrix == null || matrix.length == 0) {
            return result;
        }

        int n = matrix.length; // no. of rows
        int m = matrix[0].length; // no. of columns

        int index = 0;

        // Initialize the pointers required for traversal.
        int top = 0, left = 0, bottom = n - 1, right = m - 1;

        // Loop until all elements are not traversed.
        while (top <= bottom && left <= right) {

            // For moving left to right
            for (int i = left; i <= right; i++)
                result.add(matrix[top][i]);

            top++;

            // For moving top to bottom.
            for (int i = top; i <= bottom; i++)
                result.add(matrix[i][right]);

            right--;

            // For moving right to left.
            if (top <= bottom) {
                for (int i = right; i >= left; i--)
                    result.add(matrix[bottom][i]);

                bottom--;
            }

            // For moving bottom to top.
            if (left <= right) {
                for (int i = bottom; i >= top; i--)
                    result.add(matrix[i][left]);

                left++;
            }
        }
        
        return result;
    }
}


....................... This is another varient to solve this question.......

import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<Integer> spiralOrder(List<List<Integer>> A) {
        int T,B,L,R,dir;
        T=0;
        B=A.size()-1;
        L=0;
        R=A.get(0).size()-1;
        dir=0;
        int i;
        List<Integer> ans = new ArrayList<>();
        
        while(T<=B && L<=R) {
            if(dir==0) {
                for(i=L;i<=R;i++)
                    ans.add(A.get(T).get(i));
                T++;
            }
            else if(dir==1) {
                for(i=T;i<=B;i++)
                    ans.add(A.get(i).get(R));
                R--;
            }
            else if(dir==2) {
                for(i=R;i>=L;i--)
                    ans.add(A.get(B).get(i));
                B--;
            }
            else if(dir==3) {
                for(i=B;i>=T;i--)
                    ans.add(A.get(i).get(L));
                L++;
            }
            dir=(dir+1)%4;
        }
        return ans;
    }
}
