// better O(N^2)

public class Solution {
    public static int subarrayWithMaxProduct(int []arr){
       int n = arr.length;

       int ans = arr[0];
       for(int i = 0 ; i < n ; i++){
           int product = arr[i];
           for(int j = i+1 ; j < n ; j++){
               ans = Math.max(ans,product);
               product *= arr[j];
           }
           ans = Math.max(ans,product);
       }
       return ans;

    }
}


//optimal solution O(N)

public class Solution {
    public static int subarrayWithMaxProduct(int []arr){
       int n = arr.length;

       int prefix = 1; 
       int suffix = 1;
       int ans = Integer.MIN_VALUE;

       for(int i = 0; i < n ; i++){
           if(prefix == 0) prefix = 1;
           if(suffix == 0) suffix = 1;

           prefix *=  arr[i];
           suffix *= arr[n-i-1];

           ans = Math.max(ans,Math.max(prefix,suffix));
       }
       return ans;
    }
}
