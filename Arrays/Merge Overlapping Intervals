Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].



import java.util.*;

public class Solution {
    public static List< List< Integer > > mergeOverlappingIntervals(int [][]arr){
        // Write your code here.
        Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));

    List<List<Integer>> ans = new ArrayList<>();

    for (int i = 0; i < arr.length; i++) {
        if (ans.isEmpty() || arr[i][0] > ans.get(ans.size() - 1).get(1)) {
            ans.add(Arrays.asList(arr[i][0], arr[i][1]));
        } else {
            ans.get(ans.size() - 1).set(1, Math.max(ans.get(ans.size() - 1).get(1), arr[i][1]));
        }
    }

    return ans;
    }
}


...................................using int[][] arr....................................

class Solution
{
    public int[][] overlappedInterval(int[][] Intervals)
    {
       // Sorting intervals based on the start time
        Arrays.sort(Intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < Intervals.length; i++) {
            if (ans.isEmpty() || Intervals[i][0] > ans.get(ans.size() - 1).get(1)) {
                ans.add(Arrays.asList(Intervals[i][0], Intervals[i][1]));
            } else {
                ans.get(ans.size() - 1).set(1, Math.max(ans.get(ans.size() - 1).get(1), Intervals[i][1]));
            }
        }

        // Convert List<List<Integer>> to int[][]
        int[][] result = new int[ans.size()][2];
        for (int i = 0; i < ans.size(); i++) {
            result[i][0] = ans.get(i).get(0);
            result[i][1] = ans.get(i).get(1);
        }

        return result;
    }
}

..................................... without Arraylist.........................................

import java.util.Arrays;

class Solution {
    public int[][] overlappedInterval(int[][] Intervals) {
        // Sorting intervals based on the start time
        Arrays.sort(Intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int[][] mergedIntervals = new int[Intervals.length][2];
        int mergedIndex = 0;

        for (int i = 0; i < Intervals.length; i++) {
            if (mergedIndex == 0 || Intervals[i][0] > mergedIntervals[mergedIndex - 1][1]) {
                mergedIntervals[mergedIndex][0] = Intervals[i][0];
                mergedIntervals[mergedIndex][1] = Intervals[i][1];
                mergedIndex++;
            } else {
                mergedIntervals[mergedIndex - 1][1] = Math.max(mergedIntervals[mergedIndex - 1][1], Intervals[i][1]);
            }
        }

        // Truncate the mergedIntervals array to remove any unused slots
        return Arrays.copyOf(mergedIntervals, mergedIndex);
    }
}
