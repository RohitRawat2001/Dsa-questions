Example:

Input: 'a' = [1, 3, 2]

Output: 2 1 3

Explanation: All the permutations of [1, 2, 3] are [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1], ]. 
Hence the next greater permutation of [1, 3, 2] is [2, 1, 3].

class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int k = n - 2;

        if (n == 0) {
            return;
        }

        for (int i = n - 1; i > 0; i--) {
            if (nums[i] <= nums[i - 1]) {
                k--;
            } else {
                break;
            }
        }
        if (k == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        for (int i = n - 1; i > 0; i--) {
            if (nums[i] > nums[k]) {
                int temp = nums[k];
                nums[k] = nums[i];
                nums[i] = temp;
                break;
            }
        }
        reverse(nums, k + 1, n - 1);
    }

    void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}



///////////////////////////////////////////////////////////////////////////////////using list 
import java.util.*;

public class Solution {
    public static List<Integer> nextGreaterPermutation(List<Integer> A) {
        int n = A.size();
        int k = n - 2;

        if (n == 0) {
            return A;
        }

        for (int i = n - 1; i > 0; i--) {
            if (A.get(i) <= A.get(i - 1)) {
                k--;
            } else {
                break;
            }
        }
        if (k == -1) {
            return reverse(A, 0, n - 1);
        }
        for (int i = n - 1; i > k; i--) {
            if (A.get(i) > A.get(k)) {
                int temp = A.get(k);
                A.set(k, A.get(i));
                A.set(i, temp);
                break;
            }
        }
        return reverse(A, k + 1, n - 1);
    }

    static List<Integer> reverse(List<Integer> A, int start, int end) {
        while (start < end) {
            int temp = A.get(start);
            A.set(start, A.get(end));
            A.set(end, temp);
            start++;
            end--;
        }
        return A;
    }
}

